{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "LCLSupportETL"
		},
		"autosys_job_db_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'autosys_job_db'"
		},
		"lcl_blob_container_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'lcl_blob_container'"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/Main')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Check FIles In Blob",
						"type": "GetMetadata",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "Folders",
								"type": "DatasetReference",
								"parameters": {}
							},
							"fieldList": [
								"childItems",
								"exists"
							],
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							}
						}
					},
					{
						"name": "If Files Exist",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "Check FIles In Blob",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@not(empty(activity('Check FIles In Blob').output.childItems))",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "PopulateBoxesTable",
									"type": "ExecuteDataFlow",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataflow": {
											"referenceName": "PopulateBoxesTable",
											"type": "DataFlowReference",
											"parameters": {},
											"datasetParameters": {
												"BoxList": {},
												"UpsertBoxesTable": {}
											}
										},
										"staging": {},
										"compute": {
											"coreCount": 8,
											"computeType": "General"
										},
										"traceLevel": "Fine"
									}
								},
								{
									"name": "PopulateTablesTable",
									"type": "ExecuteDataFlow",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataflow": {
											"referenceName": "PopulateTablesTable",
											"type": "DataFlowReference",
											"parameters": {},
											"datasetParameters": {
												"TableFromQuery": {},
												"TableFromView": {},
												"TestResult": {}
											}
										},
										"staging": {},
										"compute": {
											"coreCount": 8,
											"computeType": "General"
										},
										"traceLevel": "Fine"
									}
								}
							]
						}
					}
				],
				"annotations": [],
				"lastPublishTime": "2020-12-30T03:23:49Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/Folders')]",
				"[concat(variables('factoryId'), '/dataflows/PopulateBoxesTable')]",
				"[concat(variables('factoryId'), '/dataflows/PopulateTablesTable')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/TestPopulateJobs')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "PopulateJobsTable",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "PopulateJobsTable",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"BoxJobMap": {},
									"BoxesTable": {},
									"BoxList": {},
									"SinkJobsTable": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/PopulateJobsTable')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/TestPopulatedTables')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "PopulateTablesTable",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "PopulateTablesTable",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"TableFromQuery": {},
									"TableFromView": {},
									"TestResult": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/PopulateTablesTable')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ABI_job_list_xlsx')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "lcl_blob_container",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Excel",
				"typeProperties": {
					"sheetName": "ABI_job_list",
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "ABI_job_list.xlsx",
						"container": "files"
					},
					"firstRowAsHeader": true
				},
				"schema": [
					{
						"name": "Job Name",
						"type": "String"
					},
					{
						"name": "Status",
						"type": "String"
					},
					{
						"name": "Is TD Extract box",
						"type": "String"
					},
					{
						"name": "TD extract job 1",
						"type": "String"
					},
					{
						"name": "TD extract job 2",
						"type": "String"
					},
					{
						"name": "BQ Dataset",
						"type": "String"
					},
					{
						"name": "BQ Tables",
						"type": "String"
					},
					{
						"name": "TD Tables",
						"type": "String"
					},
					{
						"name": "prerequisite_1",
						"type": "String"
					},
					{
						"name": "prerequisite_2",
						"type": "String"
					},
					{
						"name": "prerequisite_3",
						"type": "String"
					},
					{
						"name": "prerequisite_4",
						"type": "String"
					},
					{
						"name": "prerequisite_5",
						"type": "String"
					},
					{
						"name": "prerequisite_6",
						"type": "String"
					},
					{
						"name": "prerequisite_7",
						"type": "String"
					},
					{
						"name": "prerequisite_8",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/lcl_blob_container')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/BoxJobMap')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "lcl_blob_container",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "ABI_MAP_BOXES_AND_JOBS.csv",
						"container": "files"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "box",
						"type": "String"
					},
					{
						"name": "jobs__name",
						"type": "String"
					},
					{
						"name": "jobs__script",
						"type": "String"
					},
					{
						"name": "jobs__query",
						"type": "String"
					},
					{
						"name": "jobs__table__name",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/lcl_blob_container')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/BoxesTable')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "autosys_job_db",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "ID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "Name",
						"type": "varchar"
					},
					{
						"name": "HasTDExtraction",
						"type": "bit"
					},
					{
						"name": "Status",
						"type": "varchar"
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "Boxes"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/autosys_job_db')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Folders')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "lcl_blob_container",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Excel",
				"typeProperties": {
					"sheetName": "ABI_job_list",
					"location": {
						"type": "AzureBlobStorageLocation",
						"container": "files"
					}
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/lcl_blob_container')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/JobsTable')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "autosys_job_db",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "ID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "Name",
						"type": "varchar"
					},
					{
						"name": "BoxId",
						"type": "int",
						"precision": 10
					},
					{
						"name": "ScriptName",
						"type": "varchar"
					},
					{
						"name": "QueryName",
						"type": "varchar"
					},
					{
						"name": "IsTDExtraction",
						"type": "bit"
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "Jobs"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/autosys_job_db')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/TablesTable')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "autosys_job_db",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "ID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "Name",
						"type": "varchar"
					},
					{
						"name": "Dataset",
						"type": "varchar"
					},
					{
						"name": "IsFromTD",
						"type": "bit"
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "Tables"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/autosys_job_db')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/TestResult')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "lcl_blob_container",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"container": "files"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/lcl_blob_container')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/table_from_query_txt')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "lcl_blob_container",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "Table_from_query_statement.txt",
						"container": "files"
					},
					"columnDelimiter": ":",
					"escapeChar": "\\",
					"quoteChar": "\""
				},
				"schema": [
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/lcl_blob_container')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/table_from_view_txt')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "lcl_blob_container",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "Table_from_view_statement.txt",
						"container": "files"
					},
					"columnDelimiter": ":",
					"escapeChar": "\\",
					"quoteChar": "\""
				},
				"schema": [
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/lcl_blob_container')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/autosys_job_db')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "A link to autosys-job database",
				"annotations": [],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"connectionString": "[parameters('autosys_job_db_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/lcl_blob_container')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "A link to blob storage",
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": "[parameters('lcl_blob_container_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/PopulateBoxesTable')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ABI_job_list_xlsx",
								"type": "DatasetReference"
							},
							"name": "BoxList"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "BoxesTable",
								"type": "DatasetReference"
							},
							"name": "UpsertBoxesTable"
						}
					],
					"transformations": [
						{
							"name": "SelectBoxColumns"
						},
						{
							"name": "UpsertBoxes"
						},
						{
							"name": "ConvertBoolToBit"
						}
					],
					"script": "source(output(\n\t\t{Job Name} as string,\n\t\tStatus as string,\n\t\t{Is TD Extract box} as string,\n\t\t{TD extract job 1} as string,\n\t\t{TD extract job 2} as string,\n\t\t{BQ Dataset} as string,\n\t\t{BQ Tables} as string,\n\t\t{TD Tables} as string,\n\t\tprerequisite_1 as string,\n\t\tprerequisite_2 as string,\n\t\tprerequisite_3 as string,\n\t\tprerequisite_4 as string,\n\t\tprerequisite_5 as string,\n\t\tprerequisite_6 as string,\n\t\tprerequisite_7 as string,\n\t\tprerequisite_8 as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false) ~> BoxList\nBoxList select(mapColumn(\n\t\t{Job Name},\n\t\tStatus,\n\t\t{Is TD Extract box}\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectBoxColumns\nConvertBoolToBit alterRow(upsertIf(isNull({Job Name})==false())) ~> UpsertBoxes\nSelectBoxColumns derive(HasTDExtraction = toBoolean({Is TD Extract box})) ~> ConvertBoolToBit\nUpsertBoxes sink(input(\n\t\tID as integer,\n\t\tName as string,\n\t\tHasTDExtraction as boolean,\n\t\tStatus as string\n\t),\n\tallowSchemaDrift: false,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:true,\n\tkeys:['Name'],\n\tformat: 'table',\n\tmapColumn(\n\t\tName = {Job Name},\n\t\tStatus,\n\t\tHasTDExtraction\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError') ~> UpsertBoxesTable"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ABI_job_list_xlsx')]",
				"[concat(variables('factoryId'), '/datasets/BoxesTable')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PopulateJobsTable')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "BoxJobMap",
								"type": "DatasetReference"
							},
							"name": "BoxJobMap"
						},
						{
							"dataset": {
								"referenceName": "BoxesTable",
								"type": "DatasetReference"
							},
							"name": "BoxesTable"
						},
						{
							"dataset": {
								"referenceName": "ABI_job_list_xlsx",
								"type": "DatasetReference"
							},
							"name": "BoxList"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "TestResult",
								"type": "DatasetReference"
							},
							"name": "SinkJobsTable"
						}
					],
					"transformations": [
						{
							"name": "CleanData"
						},
						{
							"name": "JoinBoxes"
						},
						{
							"name": "UpsertJobs"
						},
						{
							"name": "SelectTDExtractionJobs"
						},
						{
							"name": "UnpivotJobColumns"
						},
						{
							"name": "LookupTDExtractionJob"
						},
						{
							"name": "GenIsTDExtraction"
						},
						{
							"name": "SelectJobData"
						}
					],
					"script": "source(output(\n\t\tbox as string,\n\t\tjobs__name as string,\n\t\tjobs__script as string,\n\t\tjobs__query as string,\n\t\tjobs__table__name as string\n\t),\n\tallowSchemaDrift: false,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false) ~> BoxJobMap\nsource(output(\n\t\tID as integer,\n\t\tName as string,\n\t\tHasTDExtraction as boolean,\n\t\tStatus as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> BoxesTable\nsource(output(\n\t\t{Job Name} as string,\n\t\tStatus as string,\n\t\t{Is TD Extract box} as string,\n\t\t{TD extract job 1} as string,\n\t\t{TD extract job 2} as string,\n\t\t{BQ Dataset} as string,\n\t\t{BQ Tables} as string,\n\t\t{TD Tables} as string,\n\t\tprerequisite_1 as string,\n\t\tprerequisite_2 as string,\n\t\tprerequisite_3 as string,\n\t\tprerequisite_4 as string,\n\t\tprerequisite_5 as string,\n\t\tprerequisite_6 as string,\n\t\tprerequisite_7 as string,\n\t\tprerequisite_8 as string\n\t),\n\tallowSchemaDrift: false,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false) ~> BoxList\nBoxJobMap derive(each(match(type=='string'), $$ = trim($$))) ~> CleanData\nCleanData, BoxesTable join(box == Name,\n\tjoinType:'inner',\n\tbroadcast: 'auto')~> JoinBoxes\nSelectJobData alterRow(upsertIf(true())) ~> UpsertJobs\nBoxList select(mapColumn(\n\t\tJobName = {Job Name},\n\t\tTDExtractJob1 = {TD extract job 1},\n\t\tTDExtractJob2 = {TD extract job 2}\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectTDExtractionJobs\nSelectTDExtractionJobs unpivot(output(\n\t\tTDExtractionJob as string,\n\t\tTDExtractJob1 as string,\n\t\tTDExtractJob2 as string\n\t),\n\tungroupBy(JobName),\n\tlateral: true,\n\tignoreNullPivots: true) ~> UnpivotJobColumns\nJoinBoxes, UnpivotJobColumns lookup(trim(jobs__name) == trim(TDExtractJob1),\n\tmultiple: false,\n\tpickup: 'any',\n\tbroadcast: 'auto')~> LookupTDExtractionJob\nLookupTDExtractionJob derive(IsTDExtraction = case(not(isNull(TDExtractJob1)), true(), false())) ~> GenIsTDExtraction\nGenIsTDExtraction select(mapColumn(\n\t\tBoxID = ID,\n\t\tName = jobs__name,\n\t\tScriptName = jobs__script,\n\t\tQueryName = jobs__query,\n\t\tTableName = jobs__table__name,\n\t\tIsTDExtraction\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectJobData\nUpsertJobs sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tpartitionFileNames:['TestSinkJobs.csv'],\n\tmapColumn(\n\t\tName,\n\t\tBoxId = BoxID,\n\t\tScriptName,\n\t\tQueryName,\n\t\tIsTDExtraction\n\t),\n\tpartitionBy('hash', 1),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SinkJobsTable"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/BoxJobMap')]",
				"[concat(variables('factoryId'), '/datasets/BoxesTable')]",
				"[concat(variables('factoryId'), '/datasets/ABI_job_list_xlsx')]",
				"[concat(variables('factoryId'), '/datasets/TestResult')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PopulateTablesTable')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "table_from_query_txt",
								"type": "DatasetReference"
							},
							"name": "TableFromQuery"
						},
						{
							"dataset": {
								"referenceName": "table_from_view_txt",
								"type": "DatasetReference"
							},
							"name": "TableFromView"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "TestResult",
								"type": "DatasetReference"
							},
							"name": "TestResult"
						}
					],
					"transformations": [
						{
							"name": "SplitTFQ"
						},
						{
							"name": "SplitTFV"
						},
						{
							"name": "CombineData"
						},
						{
							"name": "DistinctData"
						},
						{
							"name": "UpsertTables"
						},
						{
							"name": "DistinctTFQ"
						},
						{
							"name": "DistinctTFV"
						}
					],
					"script": "source(output(\n\t\tFilePath as string,\n\t\tLineNumber as string,\n\t\tDatasetTableName as string\n\t),\n\tallowSchemaDrift: false,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false) ~> TableFromQuery\nsource(output(\n\t\tFilePath as string,\n\t\tLineNumber as string,\n\t\tDatasetTableName as string\n\t),\n\tallowSchemaDrift: false,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false) ~> TableFromView\nDistinctTFQ derive(Dataset = split(DatasetTableName, '.')[1],\n\t\tName = split(DatasetTableName, '.')[2]) ~> SplitTFQ\nDistinctTFV derive(Dataset = split(DatasetTableName, '.')[2],\n\t\tName = split(DatasetTableName, '.')[3]) ~> SplitTFV\nSplitTFQ, SplitTFV union(byName: true)~> CombineData\nCombineData aggregate(groupBy(Dataset,\n\t\tName),\n\tFilePath = first(FilePath)) ~> DistinctData\nDistinctData alterRow(upsertIf(true())) ~> UpsertTables\nTableFromQuery aggregate(groupBy(FilePath,\n\t\tDatasetTableName),\n\tLineNumber = first(LineNumber)) ~> DistinctTFQ\nTableFromView aggregate(groupBy(FilePath,\n\t\tDatasetTableName),\n\tLineNumber = first(LineNumber)) ~> DistinctTFV\nUpsertTables sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tpartitionFileNames:['TestSinkTables.csv'],\n\tmapColumn(\n\t\tDataset,\n\t\tName,\n\t\tFilePath\n\t),\n\tpartitionBy('hash', 1),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> TestResult"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/table_from_query_txt')]",
				"[concat(variables('factoryId'), '/datasets/table_from_view_txt')]",
				"[concat(variables('factoryId'), '/datasets/TestResult')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PopulateLinkTables')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "PopulateLinkTables",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "PopulateLinkTable",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"TablesTable": {},
									"JobsTable": {},
									"BoxJobMap": {},
									"TableFromQuery": {},
									"SinkTablesInJobs": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/PopulateLinkTable')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PopulateLinkTable')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "TablesTable",
								"type": "DatasetReference"
							},
							"name": "TablesTable"
						},
						{
							"dataset": {
								"referenceName": "JobsTable",
								"type": "DatasetReference"
							},
							"name": "JobsTable"
						},
						{
							"dataset": {
								"referenceName": "BoxJobMap",
								"type": "DatasetReference"
							},
							"name": "BoxJobMap"
						},
						{
							"dataset": {
								"referenceName": "table_from_query_txt",
								"type": "DatasetReference"
							},
							"name": "TableFromQuery"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "TestResult",
								"type": "DatasetReference"
							},
							"name": "SinkTablesInJobs"
						}
					],
					"transformations": [
						{
							"name": "DistinctTFQ"
						},
						{
							"name": "SplitTFQ"
						},
						{
							"name": "JoinGetJobID"
						},
						{
							"name": "JoinGetTableID"
						},
						{
							"name": "SelectIDs1"
						},
						{
							"name": "JoinGetJobID2"
						},
						{
							"name": "JoinGetTableID2"
						},
						{
							"name": "SelectIDs2"
						},
						{
							"name": "CombineData"
						}
					],
					"script": "source(output(\n\t\tID as integer,\n\t\tName as string,\n\t\tDataset as string,\n\t\tIsFromTD as boolean\n\t),\n\tallowSchemaDrift: false,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> TablesTable\nsource(output(\n\t\tID as integer,\n\t\tName as string,\n\t\tBoxId as integer,\n\t\tScriptName as string,\n\t\tQueryName as string,\n\t\tIsTDExtraction as boolean\n\t),\n\tallowSchemaDrift: false,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> JobsTable\nsource(output(\n\t\tbox as string,\n\t\tjobs__name as string,\n\t\tjobs__script as string,\n\t\tjobs__query as string,\n\t\tjobs__table__name as string\n\t),\n\tallowSchemaDrift: false,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false) ~> BoxJobMap\nsource(output(\n\t\tFilePath as string,\n\t\tLineNumber as string,\n\t\tDatasetTableName as string\n\t),\n\tallowSchemaDrift: false,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false) ~> TableFromQuery\nTableFromQuery aggregate(groupBy(FilePath,\n\t\tDatasetTableName),\n\tLineNumber = first(LineNumber)) ~> DistinctTFQ\nDistinctTFQ derive(QueryName = split(FilePath, '/')[5],\n\t\tDataset = split(DatasetTableName, '.')[2],\n\t\tTableName = split(DatasetTableName, '.')[3]) ~> SplitTFQ\nSplitTFQ, JobsTable join(SplitTFQ@QueryName == JobsTable@QueryName,\n\tjoinType:'inner',\n\tbroadcast: 'auto')~> JoinGetJobID\nJoinGetJobID, TablesTable join(SplitTFQ@Dataset == TablesTable@Dataset\n\t&& TableName == TablesTable@Name,\n\tjoinType:'inner',\n\tbroadcast: 'auto')~> JoinGetTableID\nJoinGetTableID select(mapColumn(\n\t\tJobID = JobsTable@ID,\n\t\tTableID = TablesTable@ID\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectIDs1\nBoxJobMap, JobsTable join(jobs__name == Name,\n\tjoinType:'inner',\n\tbroadcast: 'auto')~> JoinGetJobID2\nJoinGetJobID2, TablesTable join(jobs__table__name == TablesTable@Name,\n\tjoinType:'inner',\n\tbroadcast: 'auto')~> JoinGetTableID2\nJoinGetTableID2 select(mapColumn(\n\t\tJobID = JobsTable@ID,\n\t\tTableID = TablesTable@ID\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectIDs2\nSelectIDs1, SelectIDs2 union(byName: true)~> CombineData\nCombineData sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tpartitionFileNames:['TestTablesInJobs.csv'],\n\tpartitionBy('hash', 1),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SinkTablesInJobs"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/TablesTable')]",
				"[concat(variables('factoryId'), '/datasets/JobsTable')]",
				"[concat(variables('factoryId'), '/datasets/BoxJobMap')]",
				"[concat(variables('factoryId'), '/datasets/table_from_query_txt')]",
				"[concat(variables('factoryId'), '/datasets/TestResult')]"
			]
		}
	]
}