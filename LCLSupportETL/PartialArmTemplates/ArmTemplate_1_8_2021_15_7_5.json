{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "LCLSupportETL"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/Main')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Check FIles In Blob",
						"type": "GetMetadata",
						"dependsOn": [],
						"policy": {
							"timeout": "0.00:30:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "Folders",
								"type": "DatasetReference"
							},
							"fieldList": [
								"childItems",
								"exists"
							],
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							}
						}
					},
					{
						"name": "If Files Exist",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "Check FIles In Blob",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Check If DB Is Up",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@and(not(empty(activity('Check FIles In Blob').output.childItems)), activity('Check If DB Is Up').output.exist == true())",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "PopulateBoxesTable",
									"type": "ExecuteDataFlow",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataflow": {
											"referenceName": "PopulateBoxesTable",
											"type": "DataFlowReference"
										},
										"compute": {
											"coreCount": 8,
											"computeType": "General"
										},
										"traceLevel": "Fine"
									}
								},
								{
									"name": "PopulateTablesTable",
									"type": "ExecuteDataFlow",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataflow": {
											"referenceName": "PopulateTablesTable",
											"type": "DataFlowReference"
										},
										"compute": {
											"coreCount": 8,
											"computeType": "General"
										},
										"traceLevel": "Fine"
									}
								},
								{
									"name": "PopulateJobsTable",
									"type": "ExecuteDataFlow",
									"dependsOn": [
										{
											"activity": "PopulateBoxesTable",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataflow": {
											"referenceName": "PopulateJobsTable",
											"type": "DataFlowReference"
										},
										"compute": {
											"coreCount": 8,
											"computeType": "General"
										},
										"traceLevel": "Fine"
									}
								},
								{
									"name": "PopulateLinkTables",
									"type": "ExecuteDataFlow",
									"dependsOn": [
										{
											"activity": "PopulateTablesTable",
											"dependencyConditions": [
												"Succeeded"
											]
										},
										{
											"activity": "PopulateJobsTable",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataflow": {
											"referenceName": "PopulateLinkTable",
											"type": "DataFlowReference"
										},
										"compute": {
											"coreCount": 8,
											"computeType": "General"
										},
										"traceLevel": "Fine"
									}
								}
							]
						}
					},
					{
						"name": "Check If DB Is Up",
						"type": "GetMetadata",
						"dependsOn": [],
						"policy": {
							"timeout": "0.00:30:00",
							"retry": 3,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "BoxesTable",
								"type": "DatasetReference"
							},
							"fieldList": [
								"exists"
							]
						}
					}
				],
				"annotations": [],
				"lastPublishTime": "2020-12-30T03:23:49Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/PopulateLinkTable')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PopulateLinkTables')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Check If DB Is Up",
						"type": "GetMetadata",
						"dependsOn": [],
						"policy": {
							"timeout": "0.00:30:00",
							"retry": 3,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "BoxesTable",
								"type": "DatasetReference"
							},
							"fieldList": [
								"exists"
							]
						}
					}
				],
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/PopulateLinkTable')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "TablesTable",
								"type": "DatasetReference"
							},
							"name": "TablesTable"
						},
						{
							"dataset": {
								"referenceName": "JobsTable",
								"type": "DatasetReference"
							},
							"name": "JobsTable"
						},
						{
							"dataset": {
								"referenceName": "BoxJobMap",
								"type": "DatasetReference"
							},
							"name": "BoxJobMap"
						},
						{
							"dataset": {
								"referenceName": "table_from_query_txt",
								"type": "DatasetReference"
							},
							"name": "TableFromQuery"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "TablesInJobsTable",
								"type": "DatasetReference"
							},
							"name": "SinkTablesInJobs"
						}
					],
					"transformations": [
						{
							"name": "DistinctTFQ"
						},
						{
							"name": "SplitTFQ"
						},
						{
							"name": "JoinGetJobID"
						},
						{
							"name": "JoinGetTableID"
						},
						{
							"name": "SelectIDs1"
						},
						{
							"name": "JoinGetJobID2"
						},
						{
							"name": "JoinGetTableID2"
						},
						{
							"name": "SelectIDs2"
						},
						{
							"name": "CombineData"
						},
						{
							"name": "Upserting"
						}
					],
					"script": "source(output(\n\t\tID as integer,\n\t\tName as string,\n\t\tDataset as string,\n\t\tIsFromTD as boolean\n\t),\n\tallowSchemaDrift: false,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> TablesTable\nsource(output(\n\t\tID as integer,\n\t\tName as string,\n\t\tBoxId as integer,\n\t\tScriptName as string,\n\t\tQueryName as string,\n\t\tIsTDExtraction as boolean\n\t),\n\tallowSchemaDrift: false,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> JobsTable\nsource(output(\n\t\tbox as string,\n\t\tjobs__name as string,\n\t\tjobs__script as string,\n\t\tjobs__query as string,\n\t\tjobs__table__name as string\n\t),\n\tallowSchemaDrift: false,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false) ~> BoxJobMap\nsource(output(\n\t\tFilePath as string,\n\t\tLineNumber as string,\n\t\tDatasetTableName as string\n\t),\n\tallowSchemaDrift: false,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false) ~> TableFromQuery\nTableFromQuery aggregate(groupBy(FilePath,\n\t\tDatasetTableName),\n\tLineNumber = first(LineNumber)) ~> DistinctTFQ\nDistinctTFQ derive(QueryName = split(FilePath, '/')[6],\n\t\tDataset = split(DatasetTableName, '.')[1],\n\t\tTableName = split(DatasetTableName, '.')[2]) ~> SplitTFQ\nSplitTFQ, JobsTable join(SplitTFQ@QueryName == JobsTable@QueryName,\n\tjoinType:'inner',\n\tbroadcast: 'auto')~> JoinGetJobID\nJoinGetJobID, TablesTable join(SplitTFQ@Dataset == TablesTable@Dataset\n\t&& TableName == TablesTable@Name,\n\tjoinType:'inner',\n\tbroadcast: 'auto')~> JoinGetTableID\nJoinGetTableID select(mapColumn(\n\t\tJobID = JobsTable@ID,\n\t\tTableID = TablesTable@ID\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectIDs1\nBoxJobMap, JobsTable join(jobs__name == Name,\n\tjoinType:'inner',\n\tbroadcast: 'auto')~> JoinGetJobID2\nJoinGetJobID2, TablesTable join(jobs__table__name == TablesTable@Name,\n\tjoinType:'inner',\n\tbroadcast: 'auto')~> JoinGetTableID2\nJoinGetTableID2 select(mapColumn(\n\t\tJobID = JobsTable@ID,\n\t\tTableID = TablesTable@ID\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectIDs2\nSelectIDs1, SelectIDs2 union(byName: true)~> CombineData\nCombineData alterRow(upsertIf(true())) ~> Upserting\nUpserting sink(input(\n\t\tJobID as integer,\n\t\tTableID as integer\n\t),\n\tallowSchemaDrift: false,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:true,\n\tkeys:['JobID'],\n\tformat: 'table',\n\tpartitionBy('hash', 1),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError') ~> SinkTablesInJobs"
				}
			},
			"dependsOn": []
		}
	]
}