{
	"name": "PopulateJobsTable",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "BoxJobMap",
						"type": "DatasetReference"
					},
					"name": "BoxJobMap"
				},
				{
					"dataset": {
						"referenceName": "BoxesTable",
						"type": "DatasetReference"
					},
					"name": "BoxesTable"
				},
				{
					"dataset": {
						"referenceName": "ABI_job_list_xlsx",
						"type": "DatasetReference"
					},
					"name": "BoxList"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "JobsTable",
						"type": "DatasetReference"
					},
					"name": "SinkJobsTable"
				}
			],
			"transformations": [
				{
					"name": "CleanData"
				},
				{
					"name": "JoinBoxes"
				},
				{
					"name": "UpsertJobs"
				},
				{
					"name": "SelectJobInfo"
				},
				{
					"name": "UnpivotJobColumns"
				},
				{
					"name": "LookupTDExtractionJob"
				},
				{
					"name": "GenIsTDExtraction"
				},
				{
					"name": "Select1"
				}
			],
			"script": "source(output(\n\t\tbox as string,\n\t\tjobs__name as string,\n\t\tjobs__script as string,\n\t\tjobs__query as string,\n\t\tjobs__table__name as string\n\t),\n\tallowSchemaDrift: false,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false) ~> BoxJobMap\nsource(output(\n\t\tID as integer,\n\t\tName as string,\n\t\tHasTDExtraction as boolean,\n\t\tStatus as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> BoxesTable\nsource(output(\n\t\t{Job Name} as string,\n\t\tStatus as string,\n\t\t{Is TD Extract box} as string,\n\t\t{TD extract job 1} as string,\n\t\t{TD extract job 2} as string,\n\t\t{BQ Dataset} as string,\n\t\t{BQ Tables} as string,\n\t\t{TD Tables} as string,\n\t\tprerequisite_1 as string,\n\t\tprerequisite_2 as string,\n\t\tprerequisite_3 as string,\n\t\tprerequisite_4 as string,\n\t\tprerequisite_5 as string,\n\t\tprerequisite_6 as string,\n\t\tprerequisite_7 as string,\n\t\tprerequisite_8 as string\n\t),\n\tallowSchemaDrift: false,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false) ~> BoxList\nBoxJobMap derive(each(match(type == 'string'), $$ = trim($$))) ~> CleanData\nCleanData, BoxesTable join(box == Name,\n\tjoinType:'inner',\n\tbroadcast: 'auto')~> JoinBoxes\nSelect1 alterRow(upsertIf(true())) ~> UpsertJobs\nBoxList select(mapColumn(\n\t\tJobName = {Job Name},\n\t\tTDExtractJob1 = {TD extract job 1},\n\t\tTDExtractJob2 = {TD extract job 2}\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectJobInfo\nSelectJobInfo unpivot(output(\n\t\tTDExtractionJob as string,\n\t\tTDExtractJob1 as string,\n\t\tTDExtractJob2 as string\n\t),\n\tungroupBy(JobName),\n\tlateral: true,\n\tignoreNullPivots: true) ~> UnpivotJobColumns\nJoinBoxes, UnpivotJobColumns lookup(trim(jobs__name) == trim(TDExtractJob1),\n\tmultiple: false,\n\tpickup: 'any',\n\tbroadcast: 'auto')~> LookupTDExtractionJob\nLookupTDExtractionJob derive(IsTDExtraction = case(not(isNull(TDExtractJob1)), true(), false())) ~> GenIsTDExtraction\nGenIsTDExtraction select(mapColumn(\n\t\tBoxID = ID,\n\t\tName = jobs__name,\n\t\tScriptName = jobs__script,\n\t\tQueryName = jobs__query,\n\t\tTableName = jobs__table__name,\n\t\tIsTDExtraction\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Select1\nUpsertJobs sink(input(\n\t\tID as integer,\n\t\tName as string,\n\t\tBoxId as integer,\n\t\tScriptName as string,\n\t\tQueryName as string,\n\t\tIsTDExtraction as boolean\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:true,\n\tupsertable:true,\n\tkeys:['Name'],\n\tformat: 'table',\n\tmapColumn(\n\t\tName,\n\t\tBoxId = BoxID,\n\t\tScriptName,\n\t\tQueryName,\n\t\tIsTDExtraction\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError') ~> SinkJobsTable"
		}
	}
}