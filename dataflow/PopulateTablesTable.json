{
	"name": "PopulateTablesTable",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "table_from_query_txt",
						"type": "DatasetReference"
					},
					"name": "TableFromQuery"
				},
				{
					"dataset": {
						"referenceName": "table_from_view_txt",
						"type": "DatasetReference"
					},
					"name": "TableFromView"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "TablesTable",
						"type": "DatasetReference"
					},
					"name": "SinkTables"
				}
			],
			"transformations": [
				{
					"name": "SplitTFQ"
				},
				{
					"name": "SplitTFV"
				},
				{
					"name": "CombineData"
				},
				{
					"name": "DistinctData"
				},
				{
					"name": "UpsertTables"
				}
			],
			"script": "source(output(\n\t\tFilePath as string,\n\t\tLineNumber as string,\n\t\tDatasetTableName as string\n\t),\n\tallowSchemaDrift: false,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false) ~> TableFromQuery\nsource(output(\n\t\tFilePath as string,\n\t\tLineNumber as string,\n\t\tDatasetTableName as string\n\t),\n\tallowSchemaDrift: false,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false) ~> TableFromView\nTableFromQuery derive(Name = split(DatasetTableName, '.')[1],\n\t\tDataset = split(DatasetTableName, '.')[0]) ~> SplitTFQ\nTableFromView derive(Name = split(DatasetTableName, '.')[2],\n\t\tDataset = split(DatasetTableName, '.')[1]) ~> SplitTFV\nSplitTFQ, SplitTFV union(byName: true)~> CombineData\nCombineData aggregate(groupBy(Dataset,\n\t\tName),\n\teach(match(name != 'Dataset' && name != 'Name'), $$ = first($$))) ~> DistinctData\nDistinctData alterRow(upsertIf(true())) ~> UpsertTables\nUpsertTables sink(input(\n\t\tID as integer,\n\t\tName as string,\n\t\tDataset as string,\n\t\tIsFromTD as boolean\n\t),\n\tallowSchemaDrift: false,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:true,\n\tkeys:['Dataset','Name'],\n\tformat: 'table',\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError') ~> SinkTables"
		}
	}
}